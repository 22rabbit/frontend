{"version":3,"sources":["favicon.ico","components/Framework/index.js","components/Maingraph/index.js","components/Detail/index.js","App.js","index.js"],"names":["module","exports","Header","Layout","Content","Sider","SubMenu","Menu","index","drawMenus","toolData","map","compData","undefined","children","Item","key","uuid","onClick","onclick","props","graph","name","title","handleSave","e","data","save","console","log","Axios","post","then","res","this","style","height","className","src","logo","theme","mode","defaultSelectedKeys","selectedKeys","changeMode","beginLink","data-command","width","overflow","selectable","defaultOpenKeys","borderRight","icon","UserOutlined","model","id","label","address","x","y","fill","addItem","a","padding","margin","minHeight","ref","graphConRef","Component","Maingraph","state","dom","Detail","makeDetails","keyData","params","comp","defaultVal","type","default","Group","datas","oneRadio","value","val","min","Option","initialValue","help","tip","description","componentDidMount","formRef","current","resetFields","componentDidUpdate","React","createRef","ok","findById","currentID","_cfg","layout","onFieldsChange","field","allField","addBoxClickCB","size","App","setState","drawGraph","toolbar","G6","ToolBar","container","toolBarRef","Minimap","Graph","plugins","ReactDOM","findDOMNode","graphDOM","offsetWidth","offsetHeight","modes","nodeStateStyles","click","fontSize","enabledStack","loading","on","lastid","findAllByState","forEach","cn","setItemState","nodeItem","item","source","target","endArrow","step","max","placeholder","img","setTimeout","hotkeys","handler","removeItem","undoStack","linkedList","compare","undo","position","display","nodes","edges","render","document","querySelector"],"mappings":"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","file":"static/js/main.ebbdc9ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.6e1267d9.ico\";","import React, { Component } from 'react'\r\nimport { Menu, Layout, Breadcrumb, Row } from \"antd\"\r\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\r\nimport { v1 as uuid } from \"uuid\"\r\nimport { Detail } from \"../../components\"\r\nimport logo from \"../../favicon.ico\"\r\nimport Axios from 'axios';\r\n// console.log(logo)\r\nconst { Header, Content, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nexport default class index extends Component {\r\n\r\n    drawMenus = (toolData) => {\r\n        let res = toolData.map((compData) => {\r\n            // console.log(compData.children)\r\n            // 一个组件\r\n            if (compData.children === undefined) {\r\n                // console.log(\"comp\", compData)\r\n                return <Menu.Item key={uuid()} onClick={() => {\r\n                    if (typeof compData.onclick === \"function\") {\r\n                        compData.onclick(compData, this.props.graph)\r\n                    }\r\n                }}>{compData.name}</Menu.Item>\r\n            } else {  // 一个菜单\r\n                // console.log(\"submenu\", compData)\r\n                return <SubMenu title={compData.name} key={uuid()}>\r\n                    {\r\n                        this.drawMenus(compData.children)\r\n                    }\r\n                </SubMenu>\r\n            }\r\n        })\r\n        return res\r\n    }\r\n\r\n    handleSave = (e) => {\r\n        let data = this.props.data.graph.save()\r\n        console.log(data)\r\n        Axios.post(\"/edit\", {\r\n            uuid:\"产品id\",\r\n            data:data\r\n        })\r\n            .then((res) => {\r\n                console.log(res)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        return (\r\n            <Layout style={{ height: \"100%\" }}>\r\n                <Header className=\"header\">\r\n                    <Row>\r\n                        <div className=\"logo\" >\r\n                            <img src={logo}>\r\n                            </img>\r\n                        </div>\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} selectedKeys={[\"\"]}>\r\n                            <Menu.Item key=\"2\" onClick={this.props.changeMode}>{\r\n                                this.props.data.beginLink ?\r\n                                    <div>加点模式</div> :\r\n                                    <div>连线模式</div>\r\n                            }</Menu.Item>\r\n                            <Menu.Item key=\"save\" onClick={this.handleSave}>保存模型</Menu.Item>\r\n                            <Menu.Item >\r\n                                <span data-command=\"undo\"> 撤销</span>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Row>\r\n                </Header>\r\n                <Layout>\r\n                    <Sider width={220} className=\"site-layout-background\" theme=\"light\" style={{ overflow: \"hidden\" }}>\r\n                        <div style={{ overflow: \"scroll\", height: \"102.5%\", width: 240 }}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                selectable={false}\r\n                                defaultOpenKeys={['sub1']}\r\n                                style={{ height: '100%', borderRight: 0 }}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"subnav 1\">\r\n                                    <Menu.Item key=\"1\" onClick={() => {\r\n                                        const model = {\r\n                                            id: uuid(),\r\n                                            label: 'node',\r\n                                            address: 'cq',\r\n                                            x: 200,\r\n                                            y: 150,\r\n                                            style: {\r\n                                                fill: 'blue',\r\n                                            },\r\n                                        };\r\n                                        this.props.graph.addItem('node', model)\r\n                                    }}>option1</Menu.Item>\r\n                                    <Menu.Item key=\"2\" onClick={() => {\r\n                                    }}>option2</Menu.Item>\r\n                                    {/* key可以把数据传给下面 */}\r\n                                    <Menu.Item key=\"3\" data={\"abc\"} onClick={(a) => {\r\n                                        console.log(a, a.key)\r\n                                    }}>option3</Menu.Item>\r\n                                    <Menu.Item key=\"4\">option4</Menu.Item>\r\n                                </SubMenu>\r\n\r\n\r\n                                {this.drawMenus(this.props.data.toolData)}\r\n\r\n                            </Menu>\r\n                        </div>\r\n                    </Sider>\r\n                    <Layout>\r\n                        {/* <Breadcrumb style={{ margin: '16px 0' }}>\r\n                            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                        </Breadcrumb> */}\r\n                        <Content\r\n                            className=\"site-layout-background\"\r\n                            style={{\r\n                                padding: 24,\r\n                                margin: 0,\r\n                                minHeight: 280,\r\n                            }}\r\n                            ref={this.props.graphConRef}\r\n                        >\r\n                            {this.props.children}\r\n                        </Content>\r\n                        <Sider width={200} className=\"site-layout-background\" theme=\"light\">\r\n                            <Detail {...this.props}></Detail>\r\n                        </Sider>\r\n                    </Layout>\r\n                </Layout>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, createRef } from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n// import G6 from '@antv/g6';\r\n\r\nexport default class Maingraph extends Component {\r\n    constructor() {\r\n        super()\r\n        // this.ref = createRef()\r\n        this.state = {}\r\n\r\n    }\r\n    // componentDidMount() {\r\n    //     console.log(this.ref.current)\r\n    //     const graph = new G6.Graph({\r\n    //         container: ReactDOM.findDOMNode(this.ref.current), // 指定图画布的容器 id，与第 9 行的容器对应\r\n    //         // 画布宽高\r\n    //         width: 800,\r\n    //         height: 500,\r\n    //     });\r\n    //     // 读取数据\r\n    //     graph.data(this.props.data);\r\n    //     // 渲染图\r\n    //     graph.render();\r\n\r\n\r\n    // }\r\n    render() {\r\n        return (\r\n            // <G6.Graph></G6.Graph>\r\n            <div ref={this.props.dom} style={{width:\"100%\",height:\"100%\"}}></div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { PageHeader, Input, Row, Col, Button, Checkbox, Form, Tooltip, Radio, Empty, InputNumber, Select } from \"antd\"\r\nimport Title from 'antd/lib/skeleton/Title'\r\nimport { v1 as uuid } from \"uuid\"\r\n// import Form from 'antd/lib/form/Form'\r\nimport { QuestionOutlined } from \"@ant-design/icons\"\r\n\r\nexport default class Detail extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.formRef = React.createRef();\r\n        // this.form=form\r\n        this.ok = false\r\n    }\r\n\r\n    // 渲染detail,输入的model是G6的模型数据\r\n    makeDetails = (model) => {\r\n        // console.log(data.change)\r\n        // 建立一个keyData作为组件的可变数据\r\n        if (!model.keyData) {\r\n            model.keyData = {}\r\n        }\r\n        let keyData = model.keyData\r\n        // this.props.data.params是工具栏数组中给每个组件的数据数组,这个应该是只读的\r\n        if (this.props.data.params[model.data.name]) {\r\n            // 遍历每个可变参数\r\n            return this.props.data.params[model.data.name].map((e) => {\r\n                let comp = \"\";\r\n                let defaultVal = \"\";\r\n                switch (e.type) {\r\n                    case \"text\":\r\n                        comp = <Input key={uuid()}></Input>\r\n                        defaultVal = e.default || \"\"\r\n                        break;\r\n                    case \"radio\":\r\n                        comp = <Radio.Group key={uuid()}>\r\n                            {e.datas.map((oneRadio) => {\r\n                                return <Radio value={oneRadio.val} key={uuid()}>\r\n                                    {oneRadio.name}\r\n                                </Radio>\r\n                            })}\r\n                        </Radio.Group>\r\n                        defaultVal = e.default || \"\"\r\n                        break;\r\n                    case \"number\":\r\n                        comp = <InputNumber key={uuid()} {...e.datas}></InputNumber>\r\n                        defaultVal = e.default || e.datas.min\r\n                        break;\r\n                    case \"select\":\r\n                        comp = <Select>\r\n                            {e.datas.map((oneRadio) => {\r\n                                return <Select.Option\r\n                                    value={oneRadio.val}\r\n                                    key={uuid()}\r\n                                    \r\n                                >\r\n                                    {oneRadio.name}\r\n                                </Select.Option>\r\n                            })}\r\n                        </Select>\r\n                        defaultVal = e.default || \"\"\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                // 将默认数据和模型已有数据同步\r\n                console.log(keyData)\r\n                if (keyData[e.name] !== undefined) {\r\n                    defaultVal = keyData[e.name]\r\n                } else {\r\n                    keyData[e.name] = defaultVal\r\n                }\r\n                console.log(defaultVal)\r\n                // if (e.tip) {\r\n                //     comp = <Tooltip title={e.tip}>\r\n                //         {comp}\r\n                //     </Tooltip>\r\n                // }\r\n                return <Form.Item\r\n                    label={e.name}\r\n                    key={uuid()}\r\n                    name={e.name}\r\n                    initialValue={defaultVal}\r\n                    help={e.tip}\r\n                >\r\n                    {comp}\r\n                </Form.Item>\r\n            })\r\n        } else {\r\n            return <Empty\r\n                description={\r\n                    <span>没有可调参数</span>\r\n                }\r\n            />\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        console.log(123)\r\n        if (this.formRef.current) {\r\n            console.log(this.formRef.current)\r\n            this.formRef.current.resetFields()\r\n        }\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        if (this.formRef.current) {\r\n            console.log(this.formRef.current)\r\n            this.formRef.current.resetFields()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const layout = {\r\n            labelCol: { span: 8 },\r\n            wrapperCol: { span: 16 },\r\n        };\r\n        const tailLayout = {\r\n            wrapperCol: { offset: 8, span: 16 },\r\n        };\r\n\r\n\r\n        const onFinish = values => {\r\n            console.log('Success:', values);\r\n        };\r\n\r\n        const onFinishFailed = errorInfo => {\r\n            console.log('Failed:', errorInfo);\r\n        };\r\n\r\n        // 防止没有graph\r\n        if (!this.props.data.graph) {\r\n            return <div></div>\r\n        }\r\n        console.log(this.props)\r\n        let model = this.props.data.graph.findById(this.props.data.currentID)  // 这个元素的模型\r\n        // 防止一开始id为空\r\n        if (!model) {\r\n            return <div></div>\r\n        }\r\n        let data = model._cfg.model  // 建立node时的传入参数\r\n        console.log(data)\r\n        this.ok = true\r\n        return (\r\n            <div>\r\n                <PageHeader\r\n                    className=\"组件详情\"\r\n                    title={data.data.name}\r\n                // subTitle={this.props.data.currentID}\r\n                />\r\n\r\n\r\n                <Form\r\n                    layout=\"vertical\"\r\n                    key={uuid()}\r\n                    ref={this.formRef}\r\n                    onFieldsChange={(field, allField) => {\r\n                        console.log(field, allField)\r\n                        field.map((e) => {\r\n                            let key = e.name[0]\r\n                            let val = e.value\r\n                            data.keyData[key] = val\r\n                            console.log(data)\r\n                        })\r\n                    }}\r\n                >\r\n                    {\r\n                        this.makeDetails(data)\r\n                    }\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, createRef } from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n// import { findNodeHandle, UIManager } from \"react-native\"\r\n\r\nimport { Framework, Maingraph } from \"./components\"\r\nimport G6 from '@antv/g6';\r\nimport { Button, Spin } from 'antd';\r\nimport { UpOutlined } from '@ant-design/icons';\r\nimport { v1 as uuid } from \"uuid\"\r\nimport hotkeys from 'hotkeys-js';\r\n\r\nlet addBoxClickCB = (data, graph) => {\r\n    const model = {\r\n        id: uuid(),\r\n        label: data.name,\r\n        size: data.size || 50,\r\n        type: data.type || \"circle\",\r\n        x: 200,\r\n        y: 150,\r\n        style: data.style,\r\n        data: data\r\n    };\r\n    graph.addItem('node', model)\r\n}\r\n\r\nexport default class App extends Component {\r\n    constructor() {\r\n        super()\r\n\r\n\r\n        this.state = {\r\n            beginLink: false,  // 是连线模式还是加点模式\r\n            graph: \"\",\r\n            currentID: \"\",\r\n            beginLink: false,\r\n            // params,记录每个图元的可变参数\r\n            params: {\r\n                \"比例缩放\": [\r\n                    {\r\n                        name: '比例系数',\r\n                        type: 'number',  // 直接输入文字，用input框\r\n                        default: 0.7,\r\n                        datas:{\r\n                            step:0.1,\r\n                            min:0,\r\n                            max:2\r\n                        }\r\n                    }\r\n                ],\r\n                'DHT11温湿度传感器': [\r\n                    {\r\n                        name: \"数据类型\",\r\n                        type: \"radio\",\r\n                        datas: [\r\n                            {\r\n                                name: \"温度\",\r\n                                val: \"tmp\"\r\n                            },\r\n                            {\r\n                                name: \"湿度\",\r\n                                val: \"humi\"\r\n                            }\r\n                        ],\r\n                        \r\n\r\n                    },\r\n                    {\r\n                        name:\"数据精度\",\r\n                        type:\"select\",\r\n                        datas:[\r\n                            {\r\n                                name:\"float\",\r\n                                val:\"float\"\r\n                            },{\r\n                                name:\"double\",\r\n                                val:\"double\"\r\n                            }\r\n                        ],\r\n                        props:{\r\n                            placeholder:\"选择数据精度\"\r\n                        }\r\n                    }\r\n                ],\r\n                '自定义处理函数': [\r\n                    {\r\n                        name: \"函数体\",\r\n                        type: \"text\",\r\n                        tip: \"输入以x为自变量的单值显式函数\",\r\n                        default: \"x*2\"\r\n                    }\r\n                ],\r\n                '透传': [\r\n                    {\r\n                        name: \"服务器IP\",\r\n                        type: \"text\",\r\n                        default: \"0.0.0.0\"\r\n                    }, {\r\n                        name: \"服务器端口\",\r\n                        type: \"text\"\r\n                    }\r\n                ],\r\n                'NB-Iot': [\r\n                    {\r\n                        name: \"ProductKey\",\r\n                        type: \"text\"\r\n                    }, {\r\n                        name: \"ProductSecret\",\r\n                        type: \"text\"\r\n                    },\r\n                    \r\n                ]\r\n\r\n            },\r\n            // 用来渲染工具栏的\r\n            toolData: [\r\n                {\r\n                    name: '输入模块',\r\n                    children: [\r\n                        {\r\n                            name: 'DHT11温湿度传感器',  // name将作为text进入data中,text作为小框显示内容,可被改变\r\n                            onclick: addBoxClickCB,\r\n                            type: \"rect\",\r\n                            size: [120, 50],\r\n                            style: {\r\n\r\n                            }\r\n                        }, {\r\n                            name: '电压传感器',\r\n                            onclick: addBoxClickCB,\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    name: \"数据处理\",\r\n                    children: [\r\n                        {\r\n                            name: \"比例缩放\",\r\n                            onclick: addBoxClickCB,\r\n                        },\r\n                        {\r\n                            name: \"乘2\",\r\n                            onclick: addBoxClickCB,\r\n                        }, {\r\n                            name: \"除二\",\r\n                            onclick: addBoxClickCB,\r\n                        }, {\r\n                            name: \"自定义处理函数\",\r\n                            onclick: addBoxClickCB,\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    name: '上传模块',\r\n                    img: 'img/a.jpg',\r\n                    children: [\r\n                        {\r\n                            name: '透传',\r\n                            onclick: addBoxClickCB,\r\n\r\n                        }, {\r\n                            name: 'NB-Iot',\r\n                            onclick: addBoxClickCB,\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            loading: true\r\n        }\r\n        this.graphDOM = createRef()\r\n        this.toolBarRef = createRef()\r\n        this.graphConRef = createRef()\r\n    }\r\n\r\n    // 在连线模式和普通模式间互换\r\n    changeMode = () => {\r\n        this.setState({\r\n            beginLink: !this.state.beginLink\r\n        })\r\n    }\r\n    drawGraph = () => {\r\n        const toolbar = new G6.ToolBar({\r\n            container: this.toolBarRef.current,\r\n        });\r\n        this.toolbar = toolbar\r\n        const minimap = new G6.Minimap()\r\n        // 建立graph\r\n        this.setState({\r\n            graph: new G6.Graph({\r\n                plugins: [toolbar],\r\n                container: ReactDOM.findDOMNode(this.graphDOM.current),\r\n                width: this.graphDOM.current.offsetWidth,\r\n                height: this.graphDOM.current.offsetHeight,\r\n                modes: {\r\n                    default: ['drag-canvas', 'zoom-canvas', 'drag-node'], // 允许拖拽画布、放缩画布、拖拽节点\r\n                },\r\n\r\n                nodeStateStyles: {\r\n                    click: {\r\n                        fill: '#d3adf7',\r\n                        // name 为 shape-name1 的子图形在该状态值下的样式\r\n                        'node-label': {\r\n                            fontSize: 15\r\n                        },\r\n                    },\r\n                },\r\n                enabledStack: true\r\n            }),\r\n            loading: false\r\n        }, () => {\r\n            // 点击点时\r\n            this.state.graph.on('node:click', (e) => {\r\n                this.lastid = this.state.currentID\r\n                console.log(this.lastid)\r\n                let graph = this.state.graph\r\n                // 先将所有当前是 click 状态的节点置为非 click 状态\r\n                const clickNodes = graph.findAllByState('node', 'click');\r\n                clickNodes.forEach((cn) => {\r\n                    graph.setItemState(cn, 'click', false);\r\n                });\r\n                const nodeItem = e.item; // 获取被点击的节点元素对象\r\n                graph.setItemState(nodeItem, 'click', true); // 设置当前节点的 click 状态为 true\r\n                console.log(nodeItem)\r\n                // 更改当前选中的id\r\n                this.setState({\r\n                    currentID: nodeItem._cfg.id\r\n                }, () => {\r\n                    // 更改好后连线\r\n                    console.log(this.lastid, this.state.currentID)\r\n                    if (this.lastid && this.state.currentID && this.state.beginLink) {\r\n                        graph.addItem(\"edge\", {\r\n                            id: uuid(),\r\n                            source: this.lastid,\r\n                            target: this.state.currentID,\r\n                            style: {\r\n                                endArrow: true\r\n                            }\r\n                        })\r\n                        this.lastid = \"\"\r\n                        graph.setItemState(nodeItem, 'click', false)\r\n                        this.setState({ currentID: \"\" })\r\n                    }\r\n                })\r\n\r\n            });\r\n        })\r\n    }\r\n    componentDidMount() {\r\n\r\n\r\n        // console.log(toolbar)\r\n        console.log(this.graphDOM.current.offsetWidth, this.graphDOM.current.offsetHeight)\r\n        setTimeout(() => {\r\n            console.log(this.graphDOM.current.offsetWidth, this.graphDOM.current.offsetHeight)\r\n            this.drawGraph()\r\n        }, 2000)\r\n\r\n\r\n\r\n\r\n        hotkeys(\"Delete,Backspace\", (e, handler) => {\r\n            console.log(handler)\r\n            if (this.state.graph && this.state.currentID) {\r\n                this.state.graph.removeItem(this.state.currentID)\r\n                this.setState({\r\n                    currentID: \"\"\r\n                })\r\n            }\r\n        })\r\n        hotkeys(\"ctrl+z\", () => {\r\n            console.log(this.state.graph)\r\n            console.log(this.state.graph.undoStack.linkedList.compare.compare)\r\n            // console.log(toolbar)\r\n            this.toolbar.undo()\r\n        })\r\n\r\n    }\r\n\r\n    // handleKeyPress=(e)=>{\r\n    // console.log(e)\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Framework graph={this.state.graph} data={this.state} changeMode={this.changeMode} graphConRef={this.graphConRef}>\r\n                    <div ref={this.toolBarRef} style={{ position: \"relative\", display: \"flex\" }}></div>\r\n                    {\r\n                        this.state.loading ?\r\n                            <Spin></Spin> :\r\n                            <></>\r\n                    }\r\n                    <Maingraph data={{ nodes: this.state.nodes, edges: this.state.edges }} dom={this.graphDOM} ></Maingraph>\r\n                </Framework>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport {render} from \"react-dom\"\r\n\r\nimport App from \"./App\"\r\nimport \"antd/dist/antd.less\"\r\nimport \"./index.less\"\r\n\r\nrender(\r\n    <App></App>,\r\n    document.querySelector(\"#root\")\r\n)"],"sourceRoot":""}